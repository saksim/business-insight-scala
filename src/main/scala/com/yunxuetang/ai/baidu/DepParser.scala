package com.yunxuetang.ai.baidu//import com.baidu.aip.nlp.AipNlp//import com.yunxuetang.ai.DepNode.{Attr => DepNodeAttr}//import com.yunxuetang.ai.{DepNode, YunXueTangError}//import org.json.{JSONArray, JSONObject}//import java.util.HashMap////import scala.annotation.tailrec//object DepParser {////  val APP_ID = "9331282"//  val API_KEY = "BGP9B6buzMQ0kL5AbQYoSdGk"//  val SECRET_KEY = "Vx4M4TGL5fjFSSFY8qMQBUnLAsZ2YDTy"////  val AipNLP = new AipNlp(APP_ID, API_KEY, SECRET_KEY)////  def createAttr(o: JSONObject): DepNodeAttr = Map(//    "deprel" -> o.get("deprel"),//    "parent" -> o.get("head"),//    "postag" -> o.get("postag"),//    "word" -> o.get("word")//  )////  def parse(text: String): Seq[DepNode] = {//    import scala.collection.JavaConversions._////    @tailrec//    def depParserWithTryCount(text: String, leftTryCount: Int): Seq[DepNode] = leftTryCount match {//      case c if c <= 0 => throw YunXueTangError("too many tries")//      case _ =>//        try {//          val options = new HashMap[String, Object]()//          val result = AipNLP.depParser(text, options)//          val items = result.get("items").asInstanceOf[JSONArray]//          val attrSeq = items.zipWithIndex.map { case (x: JSONObject, index) =>//            val id = index + 1 // ID is from 1//            createAttr(x) + ("id" -> id)//          }.toList//          DepNode.buildDepTree(attrSeq)//        } catch {//          case _: Throwable => depParserWithTryCount(text, leftTryCount - 1)//        }//    }////    depParserWithTryCount(text, 3)//  }////  def main(args: Array[String]) {//    //    val nodeSeq = parse("熟悉linux下常用的B/S结构软件apache、nginx、tomcat、squid、lvs、 等的使用与调优配置")//    val nodeSeq = parse("熟悉linux")//    for (node <- nodeSeq) {//      node.show()//    }//  }//}